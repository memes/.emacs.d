# DTD for the Validator Rules Configuration File, Version 1.0
# 
# To allow for XML validation of your rules configuration
# file, include the following DOCTYPE element at the beginning (after
# the "xml" declaration):
# 
# <!DOCTYPE form-validation PUBLIC
#  "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
#  "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd">
# 
# $Id: validator_1_0.rnc 1 2007-10-18 23:15:33Z memes $

# =================================================== Top Level Elements

# The "form-validation" element is the root of the configuration file
# hierarchy, and contains nested elements for all of the other
# configuration settings.

form-validation =
  element form-validation { attlist.form-validation, global*, formset* }
attlist.form-validation &= empty
# The elements defined here are all global and must be nested within a
# "global" element.
global = element global { attlist.global, validator*, constant* }
attlist.global &= empty
# The "validator" element defines what validators objects can be used with
# the fields referenced by the formset elements. The validator element can
# accept 4 properties: name, classname, method, methodparams, msg, depends,
# and jsFunctionName.
validator = element validator { attlist.validator, javascript? }
attlist.validator &=
  attribute name { text },
  attribute classname { text },
  attribute method { text },
  attribute methodParams { text },
  attribute msg { text },
  attribute depends { text }?,
  attribute jsFunctionName { text }?
# The "javascript" element defines a JavaScript that can be used to perform
# client-side validators.
javascript = element javascript { attlist.javascript, text }
attlist.javascript &= empty
# The "constant" element defines a static value that can be used as
# replacement parameters within "field" elements. The "constant-name" and
# "constant-value" elements define the constant's reference id and replacement
# value.
constant =
  element constant { attlist.constant, constant-name, constant-value }
attlist.constant &= empty
constant-name = element constant-name { attlist.constant-name, text }
attlist.constant-name &= empty
constant-value = element constant-value { attlist.constant-value, text }
attlist.constant-value &= empty
# The "formset" element defines a set of forms for a locale. Formsets for
# specific locales can override only those fields that change. The
# localization is properly scoped, so that a formset can override just the
# language, or just the country, or both.
formset = element formset { attlist.formset, constant*, form+ }
attlist.formset &=
  attribute language { text }?,
  attribute country { text }?
# The "form" element defines a set of fields to be validated. The name
# corresponds to the identifer the application assigns to the form. 
form = element form { attlist.form, field+ }
attlist.form &= attribute name { text }
# The "field" element defines the properties to be validated. In a
# web application, a field would also correspond to a control on
# a HTML form. To validate the properties, the validator works through
# a JavaBean representation. The field element can accept up to 4 
# attributes:
# 
# property        The property on the JavaBean corresponding to this
#                 field element.
# 
# depends         The comma-delimited list of validators to apply against
#                 this field. For the field to succeed, all the
#                 validators must succeed.
# 
# page            The JavaBean corresponding to this form may include
#                 a page property. Only fields with a "page" attribute
#                 value that is equal to or less than the page property
#                 on the form JavaBean are processed. This is useful when
#                 using a "wizard" approach to completing a large form,
#                 to ensure that a page is not skipped.
#                 [0]
# 
# indexedListProperty
#                 The "indexedListProperty" is the method name that will
#                 return an array or a Collection used to retrieve the
#                 list and then loop through the list performing the
#                 validations for this field.
#
field =
  element field {
    attlist.field, (msg | arg0 | arg1 | arg2 | arg3 | var)*
  }
attlist.field &=
  attribute property { text },
  attribute depends { text }?,
  attribute page { text }?,
  attribute indexedListProperty { text }?
# The "msg" element defines a custom message key to use when one of the
# validators for this field fails. Each validator has a default message
# property that is used when a corresonding field msg is not specified.
# Each validator applied to a field may have its own msg element.
# The msg element accepts up to three attributes.
# 
#  name        The name of the validator corresponding to this msg.
# 
#  key         The key that will return the message template from a
#              resource bundle.
# 
#  resource    If set to "false", the key is taken to be a literal
#              value rather than a bundle key.
#              [true]
msg = element msg { attlist.msg, empty }
attlist.msg &=
  attribute name { text }?,
  attribute key { text }?,
  attribute resource { text }?
# The "arg0" element defines the first replacement value to use with the
# message template for this validator or this field.
# The arg0 element accepts up to three attributes.
# 
#  name        The name of the validator corresponding to this msg.
# 
#  key         The key that will return the message template from a
#              resource bundle.
# 
#  resource    If set to "false", the key is taken to be a literal
#              value rather than a bundle key.
#              [true]
arg0 = element arg0 { attlist.arg0, empty }
attlist.arg0 &=
  attribute name { text }?,
  attribute key { text }?,
  attribute resource { text }?
# The "arg1" element defines the second replacement value to use with the
# message template for this validator or this field.
# The arg1 element accepts up to three attributes.
# 
#  name        The name of the validator corresponding to this msg.
# 
#  key         The key that will return the message template from a
#              resource bundle.
# 
#  resource    If set to "false", the key is taken to be a literal
#              value rather than a bundle key.
#              [true]
arg1 = element arg1 { attlist.arg1, empty }
attlist.arg1 &=
  attribute name { text }?,
  attribute key { text }?,
  attribute resource { text }?
# The "arg2" element defines the third replacement value to use with the
# message template for this validator or this field.
# The arg2 element accepts up to three attributes.
# 
#  name        The name of the validator corresponding to this msg.
# 
#  key         The key that will return the message template from a
#              resource bundle.
# 
#  resource    If set to "false", the key is taken to be a literal
#              value rather than a bundle key.
#              [true]
arg2 = element arg2 { attlist.arg2, empty }
attlist.arg2 &=
  attribute name { text }?,
  attribute key { text }?,
  attribute resource { text }?
# The "arg3" element defines the fourth replacement value to use with the
# message template for this validator or this field.
# The arg0 element accepts up to three attributes.
# 
#  name        The name of the validator corresponding to this msg.
# 
#  key         The key that will return the message template from a
#              resource bundle.
# 
#  resource    If set to "false", the key is taken to be a literal
#              value rather than a bundle key.
#              [true]
arg3 = element arg3 { attlist.arg3, empty }
attlist.arg3 &=
  attribute name { text }?,
  attribute key { text }?,
  attribute resource { text }?
# The "var" element can set parameters that a field may need to pass to
# one of its validators, such as the minimum and maximum values in a
# range validation. These parameters may also be referenced by one of the
# arg? elements using a shell syntax: ${var:var-name}.
var = element var { attlist.var, var-name, var-value }
attlist.var &= empty
# The name of the var parameter to provide to a field's validators.
var-name = element var-name { attlist.var-name, text }
attlist.var-name &= empty
# The value of the var parameter to provide to a field's validators.
var-value = element var-value { attlist.var-value, text }
attlist.var-value &= empty
start = form-validation
# eof
