# DTD for the Tile Definition File, Version 1.1
# 
# To support validation of your configuration file, include the following
# DOCTYPE element at the beginning (after the "xml" declaration):
# 
# <!DOCTYPE tiles-definitions PUBLIC
#   "-//Apache Software Foundation//DTD Tiles Configuration 1.1//EN"
#   "http://jakarta.apache.org/struts/dtds/tiles-config_1_1.dtd">
# 
# $Id: tiles-config_1_1.rnc 1 2007-10-18 23:15:33Z memes $

# ========== Defined Types =============================================

# A "Boolean" is the string representation of a boolean (true or false)
# variable.

Boolean = "true" | "false"
# A "ContentType" is the content type of an attribute passed to a tile
# component.
ContentType = "string" | "page" | "template" | "definition"
# A "ClassName" is the fully qualified name of a Java class that is
# instantiated to provide the functionality of the enclosing element.
ClassName = string
# A "RequestPath" is an application-relative URI path, beginning with a
# slash, that identifies a mapped resource (such as a JSP page or a servlet)
# within this web application.
RequestPath = string
# A "DefinitionName" is the unique identifier of a definition. This identifier
# is a logical name used to reference the definition.
DefinitionName = string
# A "BeanName" is the identifier of a JavaBean, such as a form bean,
# and also serves as the name of the corresponding scripting variable
# and the name of the JSP attribute under which the bean is accessed.
# Therefore, it must conform to the rules for a Java identifier.

# A "PropName" is the name of a JavaBeans property, and must begin with
# a lower case letter and contain only characters that are legal in a
# Java identifier.
PropName = string
# A "Location" is a relative path, delimited by "/" characters, that
# defines the location of a resource relative to the location of the
# configuration file itself.
Location = text
# ========== Top Level Elements ========================================

#  deprecated: use tiles-definitions instead.
component-definitions =
  element component-definitions {
    attlist.component-definitions, definition+
  }
attlist.component-definitions &= empty
# The "tiles-definitions" element is the root of the configuration file
# hierarchy, and contains nested elements for all of the other
# configuration settings.
tiles-definitions =
  element tiles-definitions { attlist.tiles-definitions, definition+ }
attlist.tiles-definitions &= empty
# The "definition" element describes definition that can be inserted in a jsp
# page. This definition is identified by its logical name. A definition allows
# to define all the attributes that can be set in <insert> tag from a jsp page.
# 
# name            The unique identifier for this definition.
# 
# path            The context-relative path to the resource used as tiles to
#                 insert. This tiles will be inserted and a tiles context
#                 containing appropriate attributes will be available.
# 
# page            Same as path.
# template        Same as path. For compatibility with the template taglib.
# 
# extends         Name of a definition that is used as ancestor of this definition.
#                 All attributes from the ancestor are available to the new
#                 definition. Any attribute inherited from the ancestor can
#                 be overloaded by providing a new value.
# 
# role            security role name that is allowed access to this definition
#                 object. The definition is inserted only if the role name is
#                 allowed.
# 
# controllerClass The fully qualified Java class name of the controller
#                 subclass to call immediately before the tiles is inserted.
#                 Only one of controllerClass or controllerUrl should be
#                 specified.
# 
# controllerUrl   The context-relative path to the resource used as controller
#                 called immediately before the tiles is inserted.
#                 Only one of controllerClass or controllerUrl should be
#                 specified.
definition =
  element definition {
    attlist.definition,
    icon?,
    display-name?,
    description?,
    put*,
    putList*
  }
attlist.definition &= attribute id { xsd:ID }?
attlist.definition &= attribute name { DefinitionName }
attlist.definition &= attribute page { RequestPath }?
attlist.definition &= attribute path { RequestPath }?
attlist.definition &= attribute extends { DefinitionName }?
attlist.definition &= attribute role { text }?
attlist.definition &= attribute template { RequestPath }?
attlist.definition &= attribute controllerClass { ClassName }?
attlist.definition &= attribute controllerUrl { RequestPath }?
# The "put" element describes an attribute of a definition. It allows to
# specify the tiles attribute name and its value. The tiles value can be
# specified as an xml attribute, or in the body of the <put> tag.
# 
# name            The unique identifier for this tiles attribute.
# 
# value           The value associated to this tiles attribute. The value should
#                 be specified with this tag attribute, or in the body of the tag.
# 
# type            The type of the value. Can be: string, page, template or definition.
#                 By default, no type is associated to a value. If a type is
#                 associated, it will be used as a hint to process the value
#                 when the attribute will be used in the inserted tiles.
# 
# content         Same as value. For compatibility with the template taglib.
# 
# direct          Same as type="string". For compatibility with the template
#                 taglib.
put = element put { attlist.put, text }
attlist.put &= attribute id { xsd:ID }?
attlist.put &= attribute name { text }
attlist.put &= attribute value { text }?
attlist.put &= attribute type { ContentType }?
attlist.put &= attribute content { text }?
attlist.put &= attribute direct { Boolean }?
# The "putList" element describes a list attribute of a definition. It allows to
# specify an attribute that is a java List containing any kind of values. In
# the config file, the list elements are specified by nested <add>, <item> or
# <putList>.
# 
# name            The unique identifier for this tiles attribute.
putList =
  element putList {
    attlist.putList, (add* | item* | bean* | putList*)+
  }
attlist.putList &= attribute id { xsd:ID }?
attlist.putList &= attribute name { text }
# ========== Subordinate Elements ======================================

# The "add" element describes an element of a list. It is similar to the
# <put> element.
# 
# value           The value associated to this tiles attribute. The value should
#                 be specified with this tag attribute, or in the body of the tag.
# 
# type            The type of the value. Can be: string, page, template or definition.
#                 By default, no type is associated to a value. If a type is
#                 associated, it will be used as a hint to process the value
#                 when the attribute will be used in the inserted tiles.
# 
# content         Same as value. For compatibility with the template taglib.
# 
# direct          Same as type="string". For compatibility with the template
#                 taglib.
add = element add { attlist.add, text }
attlist.add &= attribute id { xsd:ID }?
attlist.add &= attribute value { text }?
attlist.add &= attribute type { ContentType }?
attlist.add &= attribute content { text }?
attlist.add &= attribute direct { Boolean }?
# The "bean" element describes an element of a list. It create a bean of the
# specified java classtype. This bean is initialized with appropriate nested
# <set-property>.
# 
# classtype       The fully qualified classname for this bean.
bean = element bean { attlist.bean, set-property* }
attlist.bean &= attribute id { xsd:ID }?
attlist.bean &= attribute classtype { ClassName }
# The "set-property" element specifies the method name and initial value of
# a bean property. When the object representing
# the surrounding element is instantiated, the accessor for the indicated
# property is called and passed the indicated value.
# 
# property        Name of the JavaBeans property whose setter method
#                 will be called.
# 
# value           String representation of the value to which this
#                 property will be set, after suitable type conversion
set-property = element set-property { attlist.set-property, empty }
attlist.set-property &= attribute id { xsd:ID }?
attlist.set-property &= attribute property { PropName }
attlist.set-property &= attribute value { text }
# The "item" element describes an element of a list. It create a bean added as
# element to the list. Each bean can contains different properties: value, link,
# icon, tooltip. This properties are to be interpreted by the jsp page using
# them.
# By default the bean is of type
# "org.apache.struts.tiles.beans.SimpleMenuItem". This bean is useful to
# create list of beans used as menu items.
# 
# value           The bean 'value' property.
# 
# link            The bean 'link' property.
# 
# icon            The bean 'icon' property.
# 
# tooltip         The bean 'tooltip' property.
# 
# classtype       The fully qualified classname for this bean.
#                 If specified, the classname must be a subclass of the interface
#                 "org.apache.struts.tiles.beans.MenuItem".
item = element item { attlist.item, text }
attlist.item &= attribute id { xsd:ID }?
attlist.item &= attribute value { text }
attlist.item &= attribute link { text }
attlist.item &= attribute classtype { ClassName }?
attlist.item &= attribute icon { text }?
attlist.item &= attribute tooltip { text }?
# ========== Info Elements ======================================

# The "description" element contains descriptive (paragraph length) text
# about the surrounding element, suitable for use in GUI tools.
description = element description { attlist.description, text }
attlist.description &= attribute id { xsd:ID }?
# The "display-name" element contains a short (one line) description of
# the surrounding element, suitable for use in GUI tools.
display-name = element display-name { attlist.display-name, text }
attlist.display-name &= attribute id { xsd:ID }?
# The "icon" element contains a small-icon and large-icon element which
# specify the location, relative to the Struts configuration file, for small
# and large images used to represent the surrounding element in GUI tools.
icon = element icon { attlist.icon, small-icon?, large-icon? }
attlist.icon &= attribute id { xsd:ID }?
# The "large-icon" element specifies the location, relative to the Struts
# configuration file, of a resource containing a large (32x32 pixel)
# icon image.
large-icon = element large-icon { attlist.large-icon, Location }
attlist.large-icon &= attribute id { xsd:ID }?
# The "small-icon" element specifies the location, relative to the Struts
# configuration file, of a resource containing a small (16x16 pixel)
# icon image.
small-icon = element small-icon { attlist.small-icon, Location }
attlist.small-icon &= attribute id { xsd:ID }?
start = component-definitions | tiles-definitions
