# Copyright (c) 1999-2002 by BEA Systems Inc. All Rights Reserved.
# 
# This is the DTD for the Web application deployment parameters that are
# specific to the WebLogic server in WebLogic 8.1.0.
#

# The weblogic-web-app is the root element of the weblogic component of the
# Web application deployment descriptor 

weblogic-web-app =
  element weblogic-web-app {
    attlist.weblogic-web-app,
    description?,
    weblogic-version?,
    security-role-assignment*,
    run-as-role-assignment*,
    reference-descriptor?,
    session-descriptor?,
    jsp-descriptor?,
    auth-filter?,
    container-descriptor?,
    charset-params?,
    virtual-directory-mapping*,
    url-match-map?,
    preprocessor*,
    preprocessor-mapping*,
    security-permission?,
    context-root?,
    wl-dispatch-policy?,
    servlet-descriptor*,
    init-as*,
    destroy-as*
  }
attlist.weblogic-web-app &= empty
# The description element is used to provide text describing the parent element.
# 
# Used in: weblogic-web-app
description = element description { attlist.description, text }
attlist.description &= empty
# The weblogic-version specifies the version of WebLogic to which 
# the weblogic-web-app applies.
# 
# Used in: weblogic-web-app
weblogic-version =
  element weblogic-version { attlist.weblogic-version, text }
attlist.weblogic-version &= empty
# The security-role-assigment declares a mapping between an WebApp security role
# and one or more principals in the WebLogic server.
# 
# Example:
#    <security-role-assignment>
#      <role-name>PayrollAdmin</role-name>
#      <principal-name>Tanya</principal-name>
#      <principal-name>Fred</principal-name>
#      <principal-name>system</principal-name>
#    </security-role-assignment>
# 
# Example to mark a given role as a externally defined role 
# (also known as global-role):
#    <security-role-assignment>
#      <role-name>roleadmin</role-name>
#      <externally-defined/>
#    </security-role-assignment>
# 
# Note: The global-role tag has been replaced with the externally-defined tag.
#
security-role-assignment =
  element security-role-assignment {
    attlist.security-role-assignment,
    role-name,
    principal-name*,
    externally-defined?,
    global-role?
  }
attlist.security-role-assignment &= empty
# run-as-role-assignment is used to map a given run-as role-name defined
# in web.xml to a valid username in the system. The value can be
# overridden for a given servlet by the run-as-principal-name element
# in the servlet-descriptor. Note that if the run-as-role-assignment is
# absent for a given rolename then the webapp container will choose
# the first principal-name defined in the security-role-assignment,
# if present, else will use the rolename as the run-as-role-assignment.
# 
# Example to specify a given principal ("joe") to be used for run-as
#    <run-as-role-assignment>
#      <role-name>RunAsRoleName</role-name>
#      <run-as-principal-name>joe</run-as-principal-name>
#    </run-as-role-assignment>
# 
# Used in: weblogic-web-app
# 
# Since: 8.1
run-as-role-assignment =
  element run-as-role-assignment {
    attlist.run-as-role-assignment, role-name, run-as-principal-name
  }
attlist.run-as-role-assignment &= empty
# The role-name element contains the name of a security role.
# 
# Used in: security-role-assignment
role-name = element role-name { attlist.role-name, text }
attlist.role-name &= empty
# The principal-name element contains the name of a principal.
# 
# Used in: security-role-assignment
principal-name = element principal-name { attlist.principal-name, text }
attlist.principal-name &= empty
# DEPRECATED: The global-role element is now deprecated and will 
# be removed in a future version of WebLogic. Please use the 
# externally-defined element instead.
# 
# The global-role element indicates that a particular security role
# is defined 'globally' in a security realm.  Because the security role
# and it's principal-name mapping is defined elsewhere, principal-names
# are not to be specified in the deployment descriptor.  This tag
# is used as an indicative placeholder instead of a set of <principal-name> 
# elements.
# 
# Used in: security-role-assignment
# 
# Since:  7.0SP01
#
global-role = element global-role { attlist.global-role, empty }
attlist.global-role &= empty
# The externally-defined element indicates that a particular security role
# is defined 'globally' in a security realm.  Because the security role
# and it's principal-name mapping is defined elsewhere, principal-names
# are not to be specified in the deployment descriptor.  This tag
# is used as an indicative placeholder instead of a set of <principal-name> 
# elements.
# 
# Used in: security-role-assignment
# 
# Since:  8.1
externally-defined =
  element externally-defined { attlist.externally-defined, empty }
attlist.externally-defined &= empty
# The reference-descriptor specifies a list of resource-descriptions and 
# the ejb-reference-description that describe the resources used in the application.
# 
#  Used in: weblogic-web-app
# 
#  Example:
#      <reference-descriptor>
#	<resource-description>
#	  <res-ref-name>
#	    jdbc/EmployeeAppDB
#	  </res-ref-name>
#	  <jndi-name>
#	    weblogic.jdbc.jts.ejbPool
#	  </jndi-name>
#	</resource-description>
#	<resource-description>
#	  <res-ref-name>
#	    jdbc/PersonDB
#	  </res-ref-name>
#	  <jndi-name>
#	    weblogic.jdbc.jts.personPool
#	  </jndi-name>
#	</resource-description>
#	<ejb-reference-description>
#	  <ejb-ref-name>
#	    AdminBean
#	  </ejb-ref-name>
#	  <jndi-name>
#	    payroll.AdminBean
#	  </jndi-name>
#	</ejb-reference-description>
#      </reference-descriptor>
reference-descriptor =
  element reference-descriptor {
    attlist.reference-descriptor,
    resource-description*,
    resource-env-description*,
    ejb-reference-description*
  }
attlist.reference-descriptor &= empty
# The ejb-reference-description is used to map the JNDI name in the WebLogic 
# server of an EJB that is referenced by the application in an ejb-reference.
# 
#  Used in: reference-descriptor
# 
#  Example:
#      <ejb-reference-description>
#	<ejb-ref-name>
#	  AdminBean
#	</ejb-ref-name>
#	<jndi-name>
#	  payroll.AdminBean
#	</jndi-name>
#      </ejb-reference-description>
ejb-reference-description =
  element ejb-reference-description {
    attlist.ejb-reference-description, ejb-ref-name, jndi-name
  }
attlist.ejb-reference-description &= empty
# The ejb-ref-name element contains the name of an EJB reference. The
# EJB reference is an entry in the enterprise bean's environment.
# 
# Used in: ejb-reference-description
# 
# Example: 
# <ejb-ref-name>ejb/EmplRecords</ejb-ref-name>
#
ejb-ref-name = element ejb-ref-name { attlist.ejb-ref-name, text }
attlist.ejb-ref-name &= empty
# This specifies a jndi-name for a bean, resource or reference.
# 
# Used in: weblogic-enterprise-bean, reference-descriptor
jndi-name = element jndi-name { attlist.jndi-name, text }
attlist.jndi-name &= empty
# By specifying virtual directory mappings you can change the 
# default docroot for certain requests. virtual-directory-mapping 
# defines a mapping between url pattern and a new doc root
virtual-directory-mapping =
  element virtual-directory-mapping {
    attlist.virtual-directory-mapping, local-path, url-pattern+
  }
attlist.virtual-directory-mapping &= empty
# The local-path element specifies a physical location on the disk.
local-path = element local-path { attlist.local-path, text }
attlist.local-path &= empty
# The url-pattern element contains the url pattern of the mapping. Must follow the rules specified in Section 11.2 of the Servlet API Specification.
url-pattern = element url-pattern { attlist.url-pattern, text }
attlist.url-pattern &= empty
# Example:
# 
#   <virtual-directory-mapping>
#      <local-path>c:/usr/gifs</local-path>
#      <url-pattern>/images/*</url-pattern>
#      <url-pattern>*.jpg</url-pattern>
#   </virtual-directory-mapping>
# 
#   <virtual-directory-mapping>
#      <local-path>c:/usr/jsps/common.jar</local-path>
#      <url-pattern>*.jsp</url-pattern>
#   </virtual-directory-mapping>

# The resource-description is used to map the JNDI name in the WebLogic 
# server of a server resource that is used by a bean to an EJB resource 
# reference.
# 
#  Used in: reference-descriptor
# 
#  Example:
#      <resource-description>
#	<res-ref-name>
#	  jdbc/EmployeeAppDB
#	</res-ref-name>
#	<jndi-name>
#	  weblogic.jdbc.jts.ejbPool
#	</jndi-name>
#      </resource-description>
resource-description =
  element resource-description {
    attlist.resource-description, res-ref-name, jndi-name
  }
attlist.resource-description &= empty
# The res-env-ref-name element specifies the name of a resource environment
# reference.
# 
# Used in: resource-env-description
#
res-env-ref-name =
  element res-env-ref-name { attlist.res-env-ref-name, text }
attlist.res-env-ref-name &= empty
# The res-ref-name element specifies the name of a resource factory
# reference.
# 
# Used in: reference-descriptor
#
res-ref-name = element res-ref-name { attlist.res-ref-name, text }
attlist.res-ref-name &= empty
# The resource-env-description element is used to map a resource-env-ref,
# declared in the ejb-jar.xml deployment descriptor, to the JNDI name of the 
# server resource it represents.
# 
#  Used in: reference-descriptor
# 
#  Example:
#      <resource-env-description>
#	<res-env-ref-name>
#	  jms/StockInfo
#	</res-env-ref-name>
#	<jndi-name>
#	  mystockapp.jms.queue.nasdaq
#	</jndi-name>
#      </resource-description>
resource-env-description =
  element resource-env-description {
    attlist.resource-env-description, res-env-ref-name, jndi-name
  }
attlist.resource-env-description &= empty
# The sesson-descriptor specifies a list of session-params
# for servlet sessions.
# 
#  Used in: weblogic-web-app
# 
#  Example:
#      <session-descriptor>
#        <session-param>
#          <param-name>
#            FOO
#          </param-name>
#          <param-value>
#            BAR
#          </param-value>
#        </session-param>
#      </session-descriptor>
# 
#   Valid Param Names:
#     CacheSize  // Used by jdbc/file based session persistence
#                // default's to 256. Set to 0 in order to turn off
#                // caching.
#     ConsoleMainAttribute
#     CookieComment
#     CookieDomain
#     CookieMaxAgeSecs
#     CookieName
#     CookiePath
#     CookiesEnabled
#     IDLength
#     InvalidationIntervalSecs
#     JDBCConnectionTimeoutSecs
#     PersistentStoreCookieName
#     PersistentStoreDir
#     PersistentStorePool
#     PersistentStoreType
#     SwapIntervalSecs
#     TimeoutSecs
#     TrackingEnabled
#     URLRewritingEnabled
#
session-descriptor =
  element session-descriptor {
    attlist.session-descriptor, session-param*
  }
attlist.session-descriptor &= empty
# The session-param is to define parameters for servlet sessions.
# 
#  Used in: session-descriptor
# 
#  Example:
#       <session-param>
#         <param-name>
#           ConsoleMainAttribute
#         </param-name>
#         <param-value>
#           MyMainAttribute
#         </param-value>
#       </session-param>
session-param =
  element session-param {
    attlist.session-param, param-name, param-value
  }
attlist.session-param &= empty
# The jsp-descriptor specifies a list of jsp-params
# for servlet jsps.
# 
#  Used in: weblogic-web-app
# 
#  Example:
#      <jsp-descriptor>
#        <jsp-param>
#          <param-name>
#            verbose
#          </param-name>
#          <param-value>
#            false
#          </param-value>
#        </jsp-param>
#      </jsp-descriptor>
# 
#   Valid Param Names:
#     compileCommand
#     compileFlags
#     compilerClass
#     compilerSupportsEncoding
#     defaultFilename
#     encoding
#     keepgenerated
#     noTryBlocks
#     packagePrefix
#     pageCheckSeconds
#     precompile
#     verbose
#     workingDir
#     debug
#     printNulls
#
jsp-descriptor =
  element jsp-descriptor { attlist.jsp-descriptor, jsp-param* }
attlist.jsp-descriptor &= empty
# The jsp-param is to define parameters for servlet jsps.
# 
#  Used in: jsp-descriptor
# 
#  Example:
#       <jsp-param>
#         <param-name>
#           FOO
#         </param-name>
#         <param-value>
#           BAR
#         </param-value>
#       </jsp-param>
jsp-param =
  element jsp-param { attlist.jsp-param, param-name, param-value }
attlist.jsp-param &= empty
# This specifies a param-name
# 
# Used in: session-param, jsp-param
param-name = element param-name { attlist.param-name, text }
attlist.param-name &= empty
# This specifies a param-value
# 
# Used in: session-param, jsp-param
param-value = element param-value { attlist.param-value, text }
attlist.param-value &= empty
# This specifies an authentication filter HttpServlet class
auth-filter = element auth-filter { attlist.auth-filter, text }
attlist.auth-filter &= empty
# The container-descriptor specifies a list of parameters
# that affect the behavior of the web application
# Used in: weblogic-web-app
container-descriptor =
  element container-descriptor {
    attlist.container-descriptor,
    check-auth-on-forward?,
    filter-dispatched-requests-enabled?,
    redirect-content-type?,
    redirect-content?,
    redirect-with-absolute-url?,
    index-directory-enabled?,
    index-directory-sort-by?,
    servlet-reload-check-secs?,
    single-threaded-servlet-pool-size?,
    session-monitoring-enabled?,
    save-sessions-enabled?,
    prefer-web-inf-classes?,
    default-mime-type?,
    retain-original-url?,
    allow-all-roles?
  }
attlist.container-descriptor &= empty
# The check-auth-on-forward element, by its presence in a weblogic
# deployment descriptor, indicates that the request dispatcher will
# check authorization when a request is forwarded
check-auth-on-forward =
  element check-auth-on-forward { attlist.check-auth-on-forward, empty }
attlist.check-auth-on-forward &= empty
# DEPRECATED: The redirect-content-type element is deprecated since 8.1
# and will be removed in a future version of WebLogic.
# 
# If the redirect-content-type element is set, then
# the servlet container will set that type on the response
# for internal redirects (e.g., for welcome files).
redirect-content-type =
  element redirect-content-type { attlist.redirect-content-type, text }
attlist.redirect-content-type &= empty
# DEPRECATED: The redirect-content element is deprecated since 8.1
# and will be removed in a future version of WebLogic.
# 
# If the redirect-content element is set, then
# the servlet container will use that as the
# value for the user readable data used in a 
# redirect.
redirect-content =
  element redirect-content { attlist.redirect-content, text }
attlist.redirect-content &= empty
# If the redirect-with-absolute-url element is set to false, 
# then the servlet container will not convert 
# the relative url to the absolute url in the location 
# header in a redirect.
redirect-with-absolute-url =
  element redirect-with-absolute-url {
    attlist.redirect-with-absolute-url, text
  }
attlist.redirect-with-absolute-url &= empty
# Whether or not apply filters to dispatched requests
# Defaults to "true". 
filter-dispatched-requests-enabled =
  element filter-dispatched-requests-enabled {
    attlist.filter-dispatched-requests-enabled, text
  }
attlist.filter-dispatched-requests-enabled &= empty
# Whether or not to automatically generate an HTML
# directory listing if no suitable index file is found.
# Defaults to "false". Value specified via console
# will be given precedence over this setting.
index-directory-enabled =
  element index-directory-enabled {
    attlist.index-directory-enabled, text
  }
attlist.index-directory-enabled &= empty
# This element defines the order of sorting for the directory 
# listing generated by weblogic.servlet.FileServlet. Valid values
# are "NAME" (default), "LAST_MODIFIED" and "SIZE".
index-directory-sort-by =
  element index-directory-sort-by {
    attlist.index-directory-sort-by, text
  }
attlist.index-directory-sort-by &= empty
# How often WebLogic checks whether a servlet has been
# modified, and if so reloads it. -1 is never reload, 0 is 
# always reload. Default to 1 second. Value specified via 
# console will be given precedence over this setting.
servlet-reload-check-secs =
  element servlet-reload-check-secs {
    attlist.servlet-reload-check-secs, text
  }
attlist.servlet-reload-check-secs &= empty
# Defines the size of the pool used for SingleThreadModle 
# instance pools. Defaults to 5. Value specified via 
# console will be given precedence over this setting.
single-threaded-servlet-pool-size =
  element single-threaded-servlet-pool-size {
    attlist.single-threaded-servlet-pool-size, text
  }
attlist.single-threaded-servlet-pool-size &= empty
# If true, then runtime mbeans will be created for sessions,
# otherwise, they will not. Defaults to false. Value specified 
# via console will be given precedence over this setting.
session-monitoring-enabled =
  element session-monitoring-enabled {
    attlist.session-monitoring-enabled, text
  }
attlist.session-monitoring-enabled &= empty
# If true, classes located in the WEB-INF directory of a 
# web-app will be loaded in preference to classes loaded 
# in the application or system classloader. Defaults to 
# false. Value specified via console will be given 
# precedence over this setting.
prefer-web-inf-classes =
  element prefer-web-inf-classes {
    attlist.prefer-web-inf-classes, text
  }
attlist.prefer-web-inf-classes &= empty
# The charset-params element parameters related
# do what codeset will be used for non-unicode
# operations.
# Used in: weblogic-web-app
charset-params =
  element charset-params {
    attlist.charset-params, input-charset*, charset-mapping*
  }
attlist.charset-params &= empty
# The input-charset element defines what charset will be
# used to process POST data for a particular resource
input-charset =
  element input-charset {
    attlist.input-charset, resource-path, java-charset-name
  }
attlist.input-charset &= empty
# The charset-mapping element defines a mapping between
# IANA names and Java names for charsets
charset-mapping =
  element charset-mapping {
    attlist.charset-mapping, iana-charset-name, java-charset-name
  }
attlist.charset-mapping &= empty
resource-path = element resource-path { attlist.resource-path, text }
attlist.resource-path &= empty
java-charset-name =
  element java-charset-name { attlist.java-charset-name, text }
attlist.java-charset-name &= empty
iana-charset-name =
  element iana-charset-name { attlist.iana-charset-name, text }
attlist.iana-charset-name &= empty
# Using url-match-map you can specify your own 
# class for url pattern matching. By default
# weblogic uses weblogic.servlet.utils.URLMatchMap, 
# which is based on J2EE standards. So using 
# url-match-map you could overide default behaviour or 
# write your own url pattern matcher. The new class 
# has to implement weblogic.servlet.utils.URLMapping
# interface.
url-match-map = element url-match-map { attlist.url-match-map, text }
attlist.url-match-map &= empty
# The preprocessor element contains the declarative data of a preprocessor.
preprocessor =
  element preprocessor {
    attlist.preprocessor, preprocessor-name, preprocessor-class
  }
attlist.preprocessor &= empty
# The preprocessor-name element contains the canonical name of the preprocessor.
preprocessor-name =
  element preprocessor-name { attlist.preprocessor-name, text }
attlist.preprocessor-name &= empty
# The preprocessor-class element contains the fully qualified class name of the preprocessor.
preprocessor-class =
  element preprocessor-class { attlist.preprocessor-class, text }
attlist.preprocessor-class &= empty
# The preprocessor-mapping element defines a mapping between a preprocessor and a url pattern
preprocessor-mapping =
  element preprocessor-mapping {
    attlist.preprocessor-mapping, preprocessor-name, url-pattern
  }
attlist.preprocessor-mapping &= empty
# The element security permission specifies a security permission that
# is associated with a J2EE Sandbox.
# 
# Used in: weblogic-web-app
security-permission =
  element security-permission {
    attlist.security-permission, description?, security-permission-spec
  }
attlist.security-permission &= empty
# The element permission-spec specifies a single security permission based
# on the Security policy file syntax. Refer to the following URL for
# Sun's implementation of the security permission specification:
# 
# http://java.sun.com/j2se/1.3/docs/guide/security/PolicyFiles.html#FileSyntax
# 
# ignore the "codebase" and "signedBy" clauses.
# 
# e.g:
#  <security-permission-spec>
#     grant { permission java.net.SocketPermission "*", "resolve" };
#  </security-permission-spec>
# 
# Used in: security-permission
security-permission-spec =
  element security-permission-spec {
    attlist.security-permission-spec, text
  }
attlist.security-permission-spec &= empty
# The context root of this web application. This is useful for
# standalone web applications. Normally, you would specify the
# context-root in the META-INF/application.xml file of a J2EE
# EAR, however, if this is a standalone web application, you
# can specify the value here.
# 
# If context-root has been specified in application.xml, it takes 
# precedence over the setting in weblogic.xml.
context-root = element context-root { attlist.context-root, text }
attlist.context-root &= empty
# The wl-dispatch-policy can be used to assign the webapp to 
# a configured execute queue by identifying the execute queue 
# name. This webapp level param can be overridden at the 
# individual servlet/jsp level by per-servlet-dispatch-policy.
wl-dispatch-policy =
  element wl-dispatch-policy { attlist.wl-dispatch-policy, text }
attlist.wl-dispatch-policy &= empty
# The servlet-descriptor aggregates the servlet specific
# elements.
# 
# Since: 8.1
servlet-descriptor =
  element servlet-descriptor {
    attlist.servlet-descriptor,
    servlet-name,
    run-as-principal-name?,
    init-as-principal-name?,
    destroy-as-principal-name?,
    dispatch-policy?
  }
attlist.servlet-descriptor &= empty
# servlet-name is the servlet-name as defined in web.xml's 
# servlet element.
# 
# Used in: servlet-descriptor
servlet-name = element servlet-name { attlist.servlet-name, text }
attlist.servlet-name &= empty
# The run-as-principal-name element contains the name of a principal
# against the run-as role-name defined in web.xml.
# 
# Used in: run-as-role-assignment and servlet-descriptor
run-as-principal-name =
  element run-as-principal-name { attlist.run-as-principal-name, text }
attlist.run-as-principal-name &= empty
# init-as-principal-name is equivalent to run-as-principal-name 
# for the init method for servlets. The identity specified here 
# should be a valid username in the system. If init-as-principal-name
# is not specified the container will use the run-as-principal-name.
# 
# Used in: servlet-descriptor
init-as-principal-name =
  element init-as-principal-name {
    attlist.init-as-principal-name, text
  }
attlist.init-as-principal-name &= empty
# destroy-as-principal-name is equivalent to run-as-principal-name 
# for the destroy method for servlets. The identity specified here 
# should be a valid username in the system. If destroy-as-principal-name
# is not specified the container will use the run-as-principal-name.
# 
# Used in: servlet-descriptor
destroy-as-principal-name =
  element destroy-as-principal-name {
    attlist.destroy-as-principal-name, text
  }
attlist.destroy-as-principal-name &= empty
# The dispatch-policy element can be used to assign a given
# servlet to a configured execute-queue by identifying the
# execute queue name. This setting overrides the webapp
# level dispatch policy defined by wl-dispatch-policy.
# 
# Used in: servlet-descriptor
dispatch-policy =
  element dispatch-policy { attlist.dispatch-policy, text }
attlist.dispatch-policy &= empty
# DEPRECATED: The init-as element has been deprecated and has been
# replaced with the init-as-principal-name tag in the servlet-descriptor.
# 
# This is equivalent to <run-as> for init method for servlets.
# example:
#   <init-as>
#     <servlet-name>FooServlet</servlet-name>
#     <principal-name>joe</principal-name>
#   </init-as>
# 
# Since: 700sp1
init-as =
  element init-as { attlist.init-as, servlet-name, principal-name }
attlist.init-as &= empty
# DEPRECATED: The destroy-as element has been deprecated and has been
# replaced with the destroy-as-principal-name tag in the servlet-descriptor.
# 
# This is equivalent to <run-as> for destroy method for servlets.
# example:
#   <destroy-as>
#     <servlet-name>BarServlet</servlet-name>
#     <principal-name>bob</principal-name>
#   </destroy-as>
# 
# Since: 700sp1
destroy-as =
  element destroy-as {
    attlist.destroy-as, servlet-name, principal-name
  }
attlist.destroy-as &= empty
# The default mime type to be used for all extensions without 
# an explicit Mime map in web.xml
default-mime-type =
  element default-mime-type { attlist.default-mime-type, text }
attlist.default-mime-type &= empty
# This setting controls whether session data is cleaned up during 
# redeploy or undeploy. It affects memory and replicated sessions.
# Setting the value to true means session data is saved. Setting to
# false means session data will be destroyed when the web app is
# redeployed or undeployed. The default is false.
save-sessions-enabled =
  element save-sessions-enabled { attlist.save-sessions-enabled, text }
attlist.save-sessions-enabled &= empty
# The retain original url is used when users would like to store the complete URL
# of the orginal request, before forwarding to a login page, when using FormBased Authtication
retain-original-url =
  element retain-original-url { attlist.retain-original-url, text }
attlist.retain-original-url &= empty
# This setting controls whether any valid user in the system or only the roles defined in the current descriptor are allowed to access the procted resources when role-name = * specified in security-constraint  
allow-all-roles =
  element allow-all-roles { attlist.allow-all-roles, text }
attlist.allow-all-roles &= empty
start = weblogic-web-app
